

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, CHARACTER, COMMA, PRINT, VOID, CONST, LBRACKET, RBRACKET, RECORD, OR, AND, INC, DEC, DOT;
terminal Integer NUMBER, BOOL;
terminal String IDENT;
terminal IF, ELSE, ENUM;
terminal EQUALSTO, NOTEQ, GREATER, GREQ, LESS, LESSEQ, MINUS, MUL, DIV, MOD, COLON, DO, WHILE, BREAK, CONTINUE, READ, GOTO, NEW;

nonterminal Program, VarDecl, MethodDeclList, Type, MethodDecl, MethodType, MethodVarDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, Addop, Factor;
nonterminal DeclList, ConstDecl, ConstType, ConstAssignList, ConstAssign, OptionalBrackets, VarDeclaration, VarList, VarListMultiple, RecordDecl, RecordVarDecl;
nonterminal Label, StatementsArray, OptionalTerm, OptionalTerms, Statements, SingleStatement, Condition, OptionalExpr, OptionalNumConst;
nonterminal CondTerm, MulopFactor, MulopFactorArray, AddopTerm, AddopTermArray, UnaryMinus, OptionalRelopExpr, CondFact, OptionalFact, OptionalFacts, CommaExpr;
nonterminal ExprArray, ActPars, ActParsOptional, OptionalFieldAccess, OptionalFieldAccessList, DesignatorChoice, DesignatorStatement, OptionalElse;
nonterminal OptionalFactorActPars, OptionalFactorExpr, Assignop, Relop, Mulop;

precedence left ELSE;

Program ::= (Program) PROG IDENT DeclList LBRACE MethodDeclList RBRACE;

DeclList ::= (ConstDeclarationsList) DeclList ConstDecl
			|
			(VarDeclarationsList) DeclList VarDecl
			|
			(RecordDeclarationsList) DeclList RecordDecl
			|
			(NoDeclList) /* epsilon */
			;
		
ConstDecl ::= (ConstDecl) CONST Type ConstAssign ConstAssignList SEMI;

ConstAssign ::= (ConstAssign) IDENT EQUAL ConstType;

ConstAssignList ::= (ConstAssignListComma) ConstAssignList COMMA IDENT EQUAL ConstType
					|
					(NoConstAssignList) /* epsilon */
					;

ConstType ::= (ConstNumber) NUMBER
			|
			(ConstChar) CHARACTER
			|
			(ConstBool) BOOL
			;


VarDecl ::= (VarDecl) Type:varType VarList SEMI;

VarList ::= (VarListRecursion) VarListMultiple VarDeclaration
			|
			(VarListNoRecursion) VarDeclaration
			;
			
VarListMultiple ::= (VarListMultiple) VarList COMMA;

VarDeclaration ::= (VarDeclaration) IDENT OptionalBrackets;

OptionalBrackets ::= (OptionalBracketsYes) LBRACKET RBRACKET
					|
					(OptionalBracketsNo) /* epsilon */
					;

RecordDecl ::= (RecordDecl) RECORD IDENT LBRACE RecordVarDecl RBRACE;

RecordVarDecl ::= (RecordVarDeclRecursion) RecordVarDecl VarDecl
				|
				(RecordVarDeclNoRecursion) VarDecl
				;

						
Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodType:retType IDENT:methName LPAREN FormPars RPAREN MethodVarDecl LBRACE StatementList RBRACE;

MethodType ::=  (MethodTypeType) Type
				|
				(MethodVoidType) VOID
				;

MethodVarDecl ::= (MethodVarDeclRecursion) MethodVarDecl VarDecl
				|
				(MethodVarDeclNoRecursion) 
				;
				
				
FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormalParamDecl) Type IDENT OptionalBrackets;


StatementList ::= (StatementsList) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (StatementLabel) Label COLON SingleStatement				
			|
			(StatementNoLabel) SingleStatement
			|
			(StatementsArr) Statements
			;
			
Statements ::= (Statements)  LBRACE StatementsArray RBRACE;

StatementsArray ::= (StatementsArrayRecursion) StatementsArray Statement
					|
					(StatementsArrayEpsilon) /* epsilon */
					;

				
Label ::= (Label) IDENT;			

SingleStatement ::= (SingleStatementOne) DesignatorStatement SEMI 
					|
					(SingleStatementTwo) IF LPAREN Condition RPAREN Statement OptionalElse
					|
					(SingleStatementThree) DO Statement WHILE LPAREN Condition RPAREN SEMI 
					|
					(SingleStatementFour) BREAK SEMI
					|
					(SingleStatementFive) CONTINUE SEMI
					|
					(SingleStatementSix) RETURN OptionalExpr SEMI
					|
					(SingleStatementSeven) READ LPAREN Designator RPAREN SEMI
					|
					(SingleStatementEight) PRINT LPAREN Expr OptionalNumConst RPAREN SEMI
					|
					(SingleStatementNine) GOTO Label SEMI 
					;

OptionalElse ::= (OptionalElseYes) ELSE Statement
				|
				(OptionalElseNo) /* epsilon */
				;

DesignatorStatement ::= (DesignatorStatement) Designator DesignatorChoice;

DesignatorChoice ::= (DesignatorChoiceAssign) Assignop Expr
						|
						(DesignatorChoiceParams) LPAREN ActParsOptional RPAREN
						|
						(DesignatorChoiceInc) INC
						|
						(DesignatorChoiceDec) DEC
						;

Designator ::= (Designator) IDENT OptionalFieldAccessList;

OptionalFieldAccessList ::= (OptionalFieldAccessListRecursion) OptionalFieldAccessList OptionalFieldAccess
							|
							(OptionalFieldAccessListEpsilon) /* epsilon */
							;
							
OptionalFieldAccess ::= (FieldAccess) DOT IDENT 
						|
						(ArrayAccess) LBRACKET Expr RBRACKET
						;

ActParsOptional ::= (ActParsOptionalYes) ActPars
					|
					(ActParsOptionalNo) /* epsilon */
					;

ActPars ::= (ActPars) Expr ExprArray;

ExprArray ::= (ExprArrayRecursion) ExprArray CommaExpr 
			|
			(ExprArrayEpsilon) /* epsilon */
			;

CommaExpr ::= (CommaExpr) COMMA Expr;

Condition ::= (Condition) CondTerm OptionalTerms;

OptionalTerms ::= (OptionalTermsYes) OptionalTerms OptionalTerm
				|
				(OptionalTermsNo) /* epsilon */
				;

CondTerm ::= (CondTerm) CondFact OptionalFacts;

OptionalFacts ::= (OptionalFactsYes) OptionalFacts OptionalFact 
				|
				(OptionalFactsNo) /* epsilon */
				;
				
OptionalFact ::= (OptionalFact) AND CondFact;

CondFact ::= (CondFact) Expr OptionalRelopExpr;

OptionalRelopExpr ::= (OptionalRelopExprYes) Relop Expr
					|
					(OptionalRelopExprNo) /* epsilon */
					;

OptionalTerm ::= (OptionalTerm) OR CondTerm;

OptionalExpr ::= (OptionalExprYes) Expr
				|
				(OptionalExprNo) /* epsilon */
				;
				
OptionalNumConst ::= (OptionalNumConstYes) COMMA NUMBER		
					|
					(OptionalNumConstNo) /* epsilon */ 
					;

Expr ::= (Expr) UnaryMinus Term AddopTermArray;


UnaryMinus ::= (UnaryMinusYes) MINUS
			|
			(UnaryMinusNo) /* epsilon */
			;

		
AddopTermArray ::= (AddopTermArrayRecursion) AddopTermArray AddopTerm
				|
				(AddopTermArrayEpsilon) /* epislon */
				;

AddopTerm ::= (AddopTerm) Addop Term;

Term::= (Term) Factor MulopFactorArray;

MulopFactorArray ::= (MulopFactorArrayRecursion) MulopFactorArray MulopFactor
					|
					(MulopFactorArrayEpsilon) /* epsilon */
					;

MulopFactor ::= (MulopFactor) Mulop Factor;

Factor ::= (FactorDesignator) Designator OptionalFactorActPars
		|
		(FactorNumber) NUMBER
		|
		(FactorChar) CHARACTER
		|
		(FactorBool) BOOL
		|
		(FactorNewType) NEW Type OptionalFactorExpr
		|
		(FactorExpr) LPAREN Expr RPAREN
		;

OptionalFactorActPars ::= (OptionalFactorActParsYes) LPAREN ActParsOptional RPAREN
						|
						(OptionalFactorActParsNo) /* epsilon */
						;

OptionalFactorExpr ::= (OptionalFactorExprYes) LBRACKET Expr RBRACKET
					|
					(OptionalFactorExprNo) /* epsilon */
					;

Assignop ::= (Assignop) EQUAL;

Relop ::= (RelopEQUALSTO) EQUALSTO
		|
		(RelopNOTEQ) NOTEQ
		|
		(RelopGREATER) GREATER
		|
		(RelopGREQ) GREQ
		|
		(RelopLESS) LESS
		|
		(RelopLESSEQ) LESSEQ
		;

Addop ::= (AddopPlus) PLUS
		|
		(AddopMinus) MINUS
		;

Mulop ::= (MulopMul) MUL
		|
		(MulopDiv) DIV
		|
		(MulopMod) MOD
		;

















